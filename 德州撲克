#include <iostream>
#include <cstdlib> 
#include <ctime>

struct Card {
    int value;
    char suit;
};

class Licensing {
public:
    Licensing(int playerCount) : playerCount(playerCount) {
        deckSize = 52;
        deck = new Card[deckSize];
        // 初始化牌組
        for (int i = 0; i < deckSize; ++i) {
            deck[i].value = i % 13 + 1;
            deck[i].suit = "SHDC"[i / 13];
        }
    }

    ~Licensing() {
        delete[] deck;
    }

    void shuffle() {
        for (int i = 0; i < deckSize; ++i) {
            int j = std::rand() % deckSize;
            std::swap(deck[i], deck[j]);
        }
    }

    Card* deal() {
        Card* hand = new Card[5];
        for (int i = 0; i < 5; ++i) {
            hand[i] = deck[i];
        }
        // 移除已發出的牌
        for (int i = 0; i < deckSize - 5; ++i) {
            deck[i] = deck[i + 5];
        }
        deckSize -= 5;
        return hand;
    }

private:
    int playerCount;
    int deckSize;
    Card* deck;
};

class CardTypeEvaluator {
public:
    static void sortHand(Card* hand) {
        // 泡沫排序
        for (int i = 0; i < 4; ++i) {
            for (int j = 0; j < 4 - i; ++j) {
                if (hand[j].value > hand[j + 1].value) {
                    std::swap(hand[j], hand[j + 1]);
                }
            }
        }
    }

    static const char* evaluateHand(Card* hand) {
        // 排序手牌
        sortHand(hand);
        // 進行牌型判斷
        if (isRoyalFlush(hand)) return "Royal Flush";
        if (isStraightFlush(hand)) return "Straight Flush";
        if (isFourOfAKind(hand)) return "Four of a Kind";
        if (isFullHouse(hand)) return "Full House";
        if (isFlush(hand)) return "Flush";
        if (isStraight(hand)) return "Straight";
        if (isThreeOfAKind(hand)) return "Three of a Kind";
        if (isTwoPair(hand)) return "Two Pair";
        if (isPair(hand)) return "Pair";
        return "High Card";
    }

private:
    static bool isRoyalFlush(const Card* hand) {
        // 判斷是否為皇家同花順
        // 首先判斷是否同花順，然後判斷是否是10、J、Q、K、A
        if (!isStraightFlush(hand)) return false;
        return hand[0].value == 10 && hand[1].value == 11 && hand[2].value == 12 && hand[3].value == 13 && hand[4].value == 1;
    }

    static bool isStraightFlush(const Card* hand) {
        // 判斷是否為同花順
        if (!isFlush(hand)) return false; // 不是同花就不是同花順
        return isStraight(hand);
    }

    static bool isFourOfAKind(const Card* hand) {
        // 判斷是否為四條
        // 如果有4張相同牌值的牌，即為四條
        for (int i = 0; i <= 1; ++i) {
            if (hand[i].value == hand[i + 1].value && hand[i].value == hand[i + 2].value && hand[i].value == hand[i + 3].value) {
                return true;
            }
        }
        return false;
    }

    static bool isFullHouse(const Card* hand) {
        // 判斷是否為葫蘆
        // 如果有三張相同牌值的牌，且另外兩張也相同，即為葫蘆
        if ((hand[0].value == hand[1].value && hand[0].value == hand[2].value && hand[3].value == hand[4].value) ||
            (hand[0].value == hand[1].value && hand[2].value == hand[3].value && hand[2].value == hand[4].value)) {
            return true;
        }
        return false;
    }

    static bool isFlush(const Card* hand) {
        // 判斷是否為同花
        char suit = hand[0].suit;
        for (int i = 1; i < 5; ++i) {
            if (hand[i].suit != suit) return false;
        }
        return true;
    }

    static bool isStraight(const Card* hand) {
        // 判斷是否為順子
        // 如果5張牌的數值是連續的，即為順子
        for (int i = 0; i < 4; ++i) {
            if (hand[i].value + 1 != hand[i + 1].value) {
                return false;
            }
        }
        return true;
    }

    static bool isThreeOfAKind(const Card* hand) {
        // 判斷是否為三條
        // 如果有3張相同牌值的牌，即為三條
        for (int i = 0; i <= 2; ++i) {
            if (hand[i].value == hand[i + 1].value && hand[i].value == hand[i + 2].value) {
                return true;
            }
        }
        return false;
    }

    static bool isTwoPair(const Card* hand) {
        // 判斷是否為兩對
        // 如果有兩對相同牌值的牌，即為兩對
        int pairs = 0;
        for (int i = 0; i < 4; ++i) {
            if (hand[i].value == hand[i + 1].value) {
                ++pairs;
                ++i; // Skip the next card
            }
        }
        return pairs == 2;
    }

    static bool isPair(const Card* hand) {
        // 判斷是否為對子
        // 如果有2張相同牌值的牌，即為對子
        for (int i = 0; i < 4; ++i) {
            if (hand[i].value == hand[i + 1].value) {
                return true;
            }
        }
        return false;
    }
};

int main() {
    int playerCount;
    std::cout << "請輸入玩家數量: ";
    std::cin >> playerCount;

    
    std::srand(static_cast<unsigned int>(std::time(nullptr)));

    Licensing licensing(playerCount);
    licensing.shuffle();

    for (int i = 0; i < playerCount; ++i) {
        Card* hand = licensing.deal();
        std::cout << "玩家 " << i + 1 << " 的手牌: ";
        for (int j = 0; j < 5; ++j) {
            std::cout << hand[j].value << hand[j].suit << " ";
        }
        std::cout << std::endl;

        const char* type = CardTypeEvaluator::evaluateHand(hand);
        std::cout << "牌型: " << type << std::endl;
        delete[] hand;
    }

    return 0;
}
